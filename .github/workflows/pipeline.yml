# Nombre del flujo de trabajo
name: Deployment Pipeline

# Eventos que activan el flujo de trabajo
on:
  # Se ejecuta cuando hay un push en la rama "main"
  push:
    branches: [main]
  # Se ejecuta al abrir o sincronizar un pull request en la rama "main"
  pull_request:
    branches: [main]
    types: [opened, synchronize]

# Definición de trabajos (jobs) que se ejecutarán en este flujo
jobs:

  # Trabajo para evitar builds redundantes
  avoid_reduncy:
    runs-on: ubuntu-latest # Utilizamos la última versión de Ubuntu
    steps:
      # Cancela builds anteriores que ya no son necesarias
      - name: Cancel Previous Redundant Builds
        uses: styfle/cancel-workflow-action@0.9.1
        with:
          access_token: ${{ github.token }} # Token de acceso para identificar el flujo actual

  # Job para verificar el código con linting
  lint:
    runs-on: ubuntu-latest # Actualizado a la versión más reciente de Ubuntu
    steps:
      # Paso para clonar el repositorio
      - uses: actions/checkout@v3 # Actualización a la versión más reciente
        with:
          fetch-depth: 0 # Clona todo el historial de la rama
      # Configura Node.js con una versión específica
      - uses: actions/setup-node@v3 # Actualización a la versión más reciente
        with:
          cache: 'npm' # Habilita la caché para npm
          node-version: '16' # Actualización a la versión más reciente de Node.js (versión LTS actual)
      # Instala las dependencias
      - name: Install dependencies
        run: npm ci
      # Ejecuta el comando de linting
      - name: Lint
        run: npm run eslint

  # Job para construir la aplicación
  build:
    runs-on: ubuntu-latest # Utilizamos la última versión de Ubuntu
    steps:
      - uses: actions/checkout@v3 # Actualización a la versión más reciente
        with:
          fetch-depth: 0
      - uses: actions/setup-node@v3 # Actualización a la versión más reciente
        with:
          cache: 'npm'
          node-version: '16' # Utilizamos la versión LTS más reciente
      - name: Install dependencies
        run: npm ci
      - name: Build
        run: npm run build # Construye la aplicación
      - uses: actions/upload-artifact@v3 # Actualización a la versión más reciente
        with:
          name: dist # Sube la carpeta "dist" como artefacto para compartir entre jobs
          path: dist

  # Job para ejecutar pruebas unitarias
  test:
    needs: [lint, build] # Depende de que los jobs "lint" y "build" se completen
    runs-on: ubuntu-latest # Utilizamos la última versión de Ubuntu
    steps:
      - uses: actions/checkout@v3 # Actualización a la versión más reciente
        with:
          fetch-depth: 0
      - uses: actions/setup-node@v3 # Actualización a la versión más reciente
        with:
          cache: 'npm'
          node-version: '16' # Utilizamos la versión LTS más reciente
      - name: Install dependencies
        run: npm ci
      - uses: actions/download-artifact@v2 # La versión v2 sigue siendo válida para esta acción
        with:
          name: dist # Descarga el artefacto generado en el job "build"
          path: dist
      - name: Test
        run: npm test # Ejecuta las pruebas unitarias

  # Job para pruebas de extremo a extremo (E2E)
  e2e:
    needs: [lint, build] # Depende de "lint" y "build"
    runs-on: ubuntu-latest # Utilizamos la última versión de Ubuntu
    steps:
      - uses: actions/checkout@v3 # Actualización a la versión más reciente
        with:
          fetch-depth: 0
      - uses: actions/setup-node@v3 # Actualización a la versión más reciente
        with:
          cache: 'npm'
          node-version: '16' # Utilizamos la versión LTS más reciente
      - name: Install dependencies
        run: npm ci
      - uses: actions/download-artifact@v2 # La versión v2 sigue siendo válida para esta acción
        with:
          name: dist
          path: dist
      - name: E2E tests
        uses: cypress-io/github-action@v3 # Actualización a la versión más reciente
        with:
          command: npm run test:e2e # Comando para ejecutar las pruebas
          start: npm run start-test # Inicia el servidor antes de las pruebas
          wait-on: http://localhost:5000 # Espera a que el servidor esté disponible
